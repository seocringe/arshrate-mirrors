#!/bin/zsh

# Инструкция пользователя

## Описание скрипта
# Этот скрипт на языке shellscript предназначен для тестирования зеркал репозиториев. Скрипт определяет список зеркал из массива 'MIRRORS', после чего проводит тест каждого из них, сохраняя результаты в соответствующие файлы.

### Предварительные условия
# Перед использованием скрипта убедитесь, что:
# - у вас есть доступ к скрипту и установлены нужные разрешения
# - Z Shell (`zsh`) установлен на вашей системе
# - команда 'rate-mirrors' доступна в вашей системе

### Использование скрипта
# 1. Чтобы выполнить этот сценарий, откройте терминал.
# 2. Перейдите в каталог, где находится сценарий.
# 3. Для запуска скрипта используйте следующую команду: `./<имя_скрипта>`

#### Процесс тестирования зеркал
# Скрипт приступает к тестированию зеркал, перебирая их по одному. В случае успешного завершения теста, он сохраняет результаты в соответствующий файл. Если же тестирование не удалось, скрипт выдаст сообщение об ошибке и завершится с кодом ошибки 1.

#### Настройка параметров скрипта
## Если требуется изменить список репозиториев для тестирования, добавьте или удалите имена репозиториев из массива `MIRRORS` в начале скрипта.

# Проверяем наличие команды 'rate-mirrors'
if ! command -v rate-mirrors &>/dev/null; then
    # Если команда 'rate-mirrors' отсутствует, то выводим сообщение об ошибке и завершаем скрипт
    echo "[$(date)] Команда 'rate-mirrors' не найдена. Пожалуйста, установите ее и попробуйте снова."
    exit 1
fi

# Запрашиваем у пользователя root-права перед началом всех тестов
if [[ $EUID -ne 0 ]]; then
    # Если скрипт был запущен без привилегий root, пытаемся получить их через 'sudo'
    echo "[$(date)] Данный скрипт должен быть запущен с правами root. Пожалуйста, введите ваш пароль..."
    if sudo -v; then
        exec sudo "$0" "$@"
    else
        # Если не удалось аутентифицироваться через sudo, замершаем работу
        echo "[$(date)] Не удалось аутентифицироваться через sudo. Завершение работы."
        exit 1
    fi
fi

# Задаем путь к лог-файлу
LOG_FILE="mirror_test_log.txt"

# Общие параметры
declare -a COMMON_OPTIONS=("--protocol" "https" "--concurrency" "1" "--concurrency-for-unlabeled" "1" "--max-jumps" "0" "--allow-root")

# Список репозиториев для тестирования
declare -a MIRRORS=("arch" "archlinuxcn" "archarm" "artix" "blackarch"
    "cachyos" "chaotic-aur" "endeavouros" "manjaro" "rebornos")

# Функция для тестирования зеркал
test_mirrors() {
    local MIRROR=$1
    # Выводим сообщение о начале тестирования зеркала
    echo "[$(date)] Тестируем зеркала $MIRROR..."
    local FILE_PATH="/etc/pacman.d/mirrorlist-$MIRROR"
    if [ -f "$FILE_PATH" ]; then
        truncate -s 0 "$FILE_PATH"
    else
        touch "$FILE_PATH"
    fi
    # Запускаем тестирование зеркала с помощью 'rate-mirrors'
    if rate-mirrors "${COMMON_OPTIONS[@]}" $MIRROR >$FILE_PATH; then
        # Если тест прошел успешно, выводим сообщение об этом
        echo "[$(date)] Тестирование зеркал $MIRROR завершено и результаты сохранились в $FILE_PATH"
    else
        # Если тест не прошел, выводим сообщение об ошибке
        echo "[$(date)] Не удалось протестировать зеркала $MIRROR. Проверьте файл лога для деталей."
        return 1
    fi
}


# Проходим по всем репозиториям и запускаем тест для каждого из них
for MIRROR in "${MIRRORS[@]}"; do
    # Запускаем функцию 'test_mirrors' для каждого репозитория
    if ! test_mirrors $MIRROR >>$LOG_FILE 2>&1; then
        # Если в процессе тестирования возникла ошибка, выводим сообщение об ошибке
        echo "[$(date)] Возникла ошибка при тестировании зеркал $MIRROR. Проверьте файл лога для деталей."
        exit 1
    fi
done

# Выводим сообщение о успешном завершении всех тестов
echo "[$(date)] Все тесты зеркал завершены. Проверьте файл лога для деталей."
